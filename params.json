{"name":"PSD.js","tagline":"A Photoshop PSD file parser in Javascript for NodeJS and the browser.","body":"[![Build Status](https://travis-ci.org/meltingice/psd.js.svg?branch=master)](https://travis-ci.org/meltingice/psd.js)\r\n\r\nA general purpose PSD parser written in Coffeescript. Based off of [PSD.rb](https://github.com/layervault/psd.rb). It allows you to work with a Photoshop document in a manageable tree structure and find out important data such as:\r\n\r\n* Document structure\r\n* Document size\r\n* Layer/folder size + positioning\r\n* Layer/folder names\r\n* Layer/folder visibility and opacity\r\n* Font data (via [psd-enginedata](https://github.com/layervault/psd-enginedata))\r\n  * Text area contents\r\n  * Font names, sizes, and colors\r\n* Color mode and bit-depth\r\n* Vector mask data\r\n* Flattened image data\r\n* Layer comps\r\n\r\nRuns in both NodeJS and the browser (using browserify). There are still some pieces missing that are present in PSD.rb, such as layer comp filtering, a built-in renderer, and many layer info blocks. The eventual goal is full feature parity with PSD.rb.\r\n\r\n## Installation\r\n\r\nPSD.js has no native dependencies. Simply add `psd` to your package.json or run `npm install psd`.\r\n\r\n## Usage\r\n\r\nPSD.js works almost exactly the same in the browser and NodeJS.\r\n\r\n### NodeJS Example\r\n\r\n``` js\r\nvar PSD = require('psd');\r\nvar psd = PSD.fromFile(\"path/to/file.psd\");\r\npsd.parse();\r\n\r\nconsole.log(psd.tree().export());\r\nconsole.log(psd.tree().childrenAtPath('A/B/C')[0].export());\r\n\r\n// You can also use promises syntax for opening and parsing\r\nPSD.open(\"path/to/file.psd\").then(function (psd) {\r\n  return psd.image.saveAsPng('./output.png');\r\n}).then(function () {\r\n  console.log(\"Finished!\");\r\n});\r\n\r\n```\r\n\r\n### Browser Example\r\n\r\n``` js\r\nvar PSD = require('psd');\r\n\r\n// Load from URL\r\nPSD.fromURL(\"/path/to/file.psd\").then(function(psd) {\r\n  document.getElementById('ImageContainer').appendChild(psd.image.toPng());\r\n});\r\n\r\n// Load from event, e.g. drag & drop\r\nfunction onDrop(evt) {\r\n  PSD.fromEvent(evt).then(function (psd) {\r\n    console.log(psd.tree().export());\r\n  }); \r\n}\r\n```\r\n\r\n### Traversing the Document\r\n\r\nTo access the document as a tree structure, use `psd.tree()` to get the root node. From there, work with the tree using any of these methods:\r\n\r\n* `root()`: get the root node from anywhere in the tree\r\n* `isRoot()`: is this the root node?\r\n* `children()`: get all immediate children of the node\r\n* `hasChildren()`: does this node have any children?\r\n* `childless()`: opposite of `hasChildren()`\r\n* `ancestors()`: get all ancestors in the path of this node (excluding the root)\r\n* `siblings()`: get all sibling tree nodes including the current one (e.g. all layers in a folder)\r\n* `nextSibling()`: gets the sibling immediately following the current node\r\n* `prevSibling()`: gets the sibling immediately before the current node\r\n* `hasSiblings()`: does this node have any siblings?\r\n* `onlyChild()`: opposite of `hasSiblings()`\r\n* `descendants()`: get all descendant nodes not including the current one\r\n* `subtree()`: same as descendants but starts with the current node\r\n* `depth()`: calculate the depth of the current node (root node is 0)\r\n* `path()`: gets the path to the current node\r\n\r\nIf you know the path to a group or layer within the tree, you can search by that path. Note that this always returns an Array because layer/group names do not have to be unique. The search is always scoped to the descendants of the current node, as well.\r\n\r\n``` js\r\npsd.tree().childrenAtPath('Version A/Matte');\r\npsd.tree().childrenAtPath(['Version A', 'Matte']);\r\n```\r\n\r\n### Accessing Layer Data\r\n\r\nTo get data such as the name or dimensions of a layer:\r\n\r\n``` js\r\nnode = psd.tree().descendants()[0];\r\nnode.get('name');\r\nnode.get('width');\r\n```\r\n\r\nPSD files also store various pieces of information in \"layer info\" blocks. See [this file](https://github.com/meltingice/psd.js/blob/master/lib/psd/layer/info.coffee) for all of the possible layer info blocks that PSD.js parses (in `LAYER_INFO`). Which blocks a layer has varies from layer-to-layer, but to access them you can do:\r\n\r\n``` js\r\nnode = psd.tree().descendants()[0]\r\nnode.get('typeTool').export()\r\nnode.get('vectorMask').export()\r\n```\r\n\r\n### Exporting Data\r\n\r\nWhen working with the tree structure, you can recursively export any node to an object. This does not dump *everything*, but it does include the most commonly accessed information.\r\n\r\n``` js\r\nconsole.log(psd.tree().export());\r\n```\r\n\r\nWhich produces something like:\r\n\r\n``` js\r\n{ children: \r\n   [ { type: 'group',\r\n       visible: false,\r\n       opacity: 1,\r\n       blendingMode: 'normal',\r\n       name: 'Version D',\r\n       left: 0,\r\n       right: 900,\r\n       top: 0,\r\n       bottom: 600,\r\n       height: 600,\r\n       width: 900,\r\n       children: \r\n        [ { type: 'layer',\r\n            visible: true,\r\n            opacity: 1,\r\n            blendingMode: 'normal',\r\n            name: 'Make a change and save.',\r\n            left: 275,\r\n            right: 636,\r\n            top: 435,\r\n            bottom: 466,\r\n            height: 31,\r\n            width: 361,\r\n            mask: {},\r\n            text: \r\n             { value: 'Make a change and save.',\r\n               font: \r\n                { name: 'HelveticaNeue-Light',\r\n                  sizes: [ 33 ],\r\n                  colors: [ [ 85, 96, 110, 255 ] ],\r\n                  alignment: [ 'center' ] },\r\n               left: 0,\r\n               top: 0,\r\n               right: 0,\r\n               bottom: 0,\r\n               transform: { xx: 1, xy: 0, yx: 0, yy: 1, tx: 456, ty: 459 } },\r\n            image: {} } ] } ],\r\n    document: \r\n       { width: 900,\r\n         height: 600,\r\n         resources: \r\n          { layerComps: \r\n             [ { id: 692243163, name: 'Version A', capturedInfo: 1 },\r\n               { id: 725235304, name: 'Version B', capturedInfo: 1 },\r\n               { id: 730932877, name: 'Version C', capturedInfo: 1 } ],\r\n            guides: [],\r\n            slices: [] } } }\r\n```\r\n\r\nYou can also export the PSD to a flattened image. Please note that, at this time, not all image modes + depths are supported.\r\n\r\n``` js\r\npng = psd.image.toPng(); // get PNG object\r\npsd.image.saveAsPng('path/to/output.png').then(function () {\r\n  console.log('Exported!');\r\n});\r\n```\r\n\r\nThis uses the full rasterized preview provided by Photoshop. If the file was not saved with Compatibility Mode enabled, this will return an empty image.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}